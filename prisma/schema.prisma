generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id              Int        @id @default(autoincrement())
  username        String     @unique
  role            Role       @default(user)
  email           String     @unique
  password_digest String
  image           String?
  phone           String?    @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  metadata        Json?      @default("{\"emailVerified\": false, \"phoneVerified\": false, \"provider\": \"email\"}")
  preferences     Json?      @default("{\"notifications\": {\"discounts\": true, \"newProducts\": true, \"monthlyReports\": true, \"dailyReports\": false}}")
  reviews         Review[]
  bookings        Booking[]
  favorites       Favorite[]
  discounts       Discount[]
}

model Car {
  id               Int              @id @default(autoincrement())
  modelName        String
  image            String           @unique
  year             Int
  pricePerDay      Int
  transmissionType TransmissionType
  bodyType         BodyType
  fuelConsumption  Int
  seats            Int
  fuelType         fuelType
  isRented         Boolean          @default(false)
  rentedUntill     DateTime?
  rating           Int              @default(5)
  location         Location         @default(nairobi)
  createdAt        DateTime         @default(now())
  reviews          Review[]
  bookings         Booking[]
  favorites        Favorite[]
  Discount         Discount[]

  @@unique([modelName, year])
}

model Review {
  id        Int      @id @default(autoincrement())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  body      String
  title     String
  rating    Int
  recommend Boolean  @default(true)

  @@unique([userId, carId])
}

model Booking {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  car            Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId          Int
  startDate      DateTime
  endDate        DateTime
  pickupLocation String
  dropLocation   String
  phoneNumber    String
  totalPrice     Int
  status         Status   @default(scheduled)
  createdAt      DateTime @default(now())
}

model Favorite {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  car    Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId  Int

  @@unique([userId, carId])
}

model Discount {
  id          Int            @id @default(autoincrement())
  user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  code        String         @unique
  percent     Int
  min_amount  Int?
  max_amount  Int?
  description String
  expiresAt   DateTime
  status      discountStatus @default(valid)
  metadata    Json           @default("[]")
  createdAt   DateTime       @default(now())
  Car         Car?           @relation(fields: [carId], references: [id])
  carId       Int?
}

enum TransmissionType {
  automatic
  manual
}

enum Role {
  user
  admin
}

enum BodyType {
  suv
  saloon
  van
  pickup
}

enum fuelType {
  petrol
  diesel
  electric
  hybrid
}

enum Status {
  scheduled
  ongoing
  completed
  cancelled
}

enum Location {
  nairobi
  thika
  mombasa
  eldoret
  kisumu
}

enum discountStatus {
  valid
  used
  expired
}
